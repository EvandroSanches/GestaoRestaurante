unit ur_compras;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, QRCtrls, QuickRpt, Vcl.ExtCtrls;

type
  TR_compras = class(TForm)
    QRP: TQuickRep;
    DetailBand1: TQRBand;
    QRDBText1: TQRDBText;
    QRDBText2: TQRDBText;
    QRDBText3: TQRDBText;
    QRDBText4: TQRDBText;
    QRDBText7: TQRDBText;
    QRDBText8: TQRDBText;
    PageFooterBand1: TQRBand;
    QRSysData2: TQRSysData;
    PageHeaderBand1: TQRBand;
    QRLabel7: TQRLabel;
    QRLabel8: TQRLabel;
    QRLabel9: TQRLabel;
    QRLabel10: TQRLabel;
    QRSysData1: TQRSysData;
    QRGroup1: TQRGroup;
    QRDBText5: TQRDBText;
    QRDBText6: TQRDBText;
    QRDBText9: TQRDBText;
    ChildBand1: TQRChildBand;
    QRLabel1: TQRLabel;
    QRLabel2: TQRLabel;
    QRLabel3: TQRLabel;
    QRLabel4: TQRLabel;
    QRLabel5: TQRLabel;
    QRLabel6: TQRLabel;
    band_footer_group: TQRBand;
    QRLabel11: TQRLabel;
    QRExpr1: TQRExpr;
    QRExpr2: TQRExpr;
    QRLabel12: TQRLabel;
    Q_dados: TFDQuery;
    QRLabel13: TQRLabel;
    QRDBText10: TQRDBText;
    procedure QRPBeforePrint(Sender: TCustomQuickRep; var PrintReport: Boolean);
    procedure DetailBand1BeforePrint(Sender: TQRCustomBand;
      var PrintBand: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
    cod_compra : string
  end;

var
  R_compras: TR_compras;
  par : boolean;

implementation

{$R *.dfm}

procedure TR_compras.DetailBand1BeforePrint(Sender: TQRCustomBand;
  var PrintBand: Boolean);
begin
  if not par then
  begin
    DetailBand1.Color := $00E1E1E1;
  end
  else
  begin
    DetailBand1.Color := clWhite;
  end;

  par := not par;
end;

procedure TR_compras.QRPBeforePrint(Sender: TCustomQuickRep;
  var PrintReport: Boolean);
begin
   par := false;
  Q_dados.sql.Clear;
  Q_dados.SQL.Add('select c.cod_compra,');
  Q_dados.SQL.Add('c.nota_fiscal,');
  Q_dados.SQL.Add('c.data,');
  Q_dados.SQL.Add('ic.valor_unitario as valor_unitario_ingrediente,');
  Q_dados.SQL.Add('ic.quantidade,');
  Q_dados.SQL.Add('i.descricao as ingrediente,');
  Q_dados.SQL.Add('f.razao_social as fornecedor,');
  Q_dados.SQL.Add('u.descricao as unidade,');
  Q_dados.SQL.Add('i.cod_ingrediente,');
  Q_dados.SQL.Add('c.valor_total as valor_total_ingrediente');
  Q_dados.SQL.Add('from compras as c');
  Q_dados.SQL.Add('inner join fornecedores as f on (f.cod_fornecedor = c.cod_fornecedor)');
  Q_dados.SQL.Add('inner join itens_compra as ic on (ic.cod_compra = c.cod_compra)');
  Q_dados.SQL.Add('inner join ingredientes as i on (i.cod_ingrediente = ic.cod_ingrediente)');
  Q_dados.SQL.Add('inner join unidades as u on (u.cod_unidade = i.cod_unidade)');



  if cod_compra <> '' then
  begin
    Q_dados.SQL.Add('where c.cod_compra = :cod_compra');
    Q_dados.ParamByName('cod_compra').AsString := cod_compra;
  end;
  Q_dados.SQL.Add('order by nota_fiscal,ingrediente');
  Q_dados.Open();
end;

end.
